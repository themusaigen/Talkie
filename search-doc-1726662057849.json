[{"title":"BufferIO","type":0,"sectionRef":"#","url":"/Talkie/api/BufferIO","content":"On this page BufferIO A utility class tha tells you, based on a string representation of a data type, how to read and write it. Mostly used for serder systems like Packet. See BufferIO.lua for detailed information. Because the purpose of each type is described by its name, there is no documentation for BufferIO.","keywords":""},{"title":"Client.Event","type":0,"sectionRef":"#","url":"/Talkie/api/Client.Event","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#new","content":"&lt;/&gt; Client.Event.new( parent: Instance , name: string, middleware: Types.ClientMiddleware? ) → Types.ClientEvent Grabs RemoteEvent or UnreliableRemoteEvent instance and return wrapper for it. local event = client:Event(&quot;MyEvent&quot;) event:Fire(24, 26)   "},{"title":"Connect​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#Connect","content":"&lt;/&gt; Client.Event:Connect(handler: Types.ClientHandler) → Signal.Connection Appends new connection to the event.  "},{"title":"Once​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#Once","content":"&lt;/&gt; Client.Event:Once(handler: Types.ClientHandler) → Signal.Connection Appends new connection that will fired only once.  "},{"title":"Wait​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Client.Event:Wait() → () Yields the current thread until the signal is fired, and returns the arguments fired from the signal.  "},{"title":"Fire​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#Fire","content":"&lt;/&gt; Client.Event:Fire(...: any) → () Fires the event on server with middlewares applied.  "},{"title":"SetMiddleware​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#SetMiddleware","content":"&lt;/&gt; Client.Event:SetMiddleware(middleware: Types.ClientMiddleware) → () Post-method for setup a middleware event:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))   "},{"title":"Destroy​","type":1,"pageTitle":"Client.Event","url":"/Talkie/api/Client.Event#Destroy","content":"&lt;/&gt; Client.Event:Destroy() → () Destroys the event. "},{"title":"Client.Function","type":0,"sectionRef":"#","url":"/Talkie/api/Client.Function","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Function","url":"/Talkie/api/Client.Function#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Client.Function","url":"/Talkie/api/Client.Function#new","content":"&lt;/&gt; Client.Function.new( parent: Instance , name: string, handler: Types.ClientHandler?, middleware: Types.ClientMiddleware? ) → Types.ClientFunction Grabs RemoteFunction from the workspace and returns a wrapper for it. local fun = client:Function(&quot;MyFunction&quot;) fun(42) -- or fun:Invoke   "},{"title":"Listen​","type":1,"pageTitle":"Client.Function","url":"/Talkie/api/Client.Function#Listen","content":"&lt;/&gt; Client.Function:Listen(handler: Types.ClientHandler) → () Assigns new handler that will called then server invokes the remote.  "},{"title":"Invoke​","type":1,"pageTitle":"Client.Function","url":"/Talkie/api/Client.Function#Invoke","content":"&lt;/&gt; Client.Function:Invoke(...: any) → any Invokes a function on the server. event:Invoke(&quot;I am hungry!&quot;) event(&quot;I am hungry!&quot;)   "},{"title":"SetMiddleware​","type":1,"pageTitle":"Client.Function","url":"/Talkie/api/Client.Function#SetMiddleware","content":"&lt;/&gt; Client.Function:SetMiddleware(middleware: Types.ClientMiddleware) → () Post-method for setup a middleware event:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))  "},{"title":"Client.Property","type":0,"sectionRef":"#","url":"/Talkie/api/Client.Property","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#new","content":"&lt;/&gt; Client.Property.new( parent: Instance , name: string, middleware: Types.ClientMiddleware? ) → Types.ClientProperty Grabs RemoteEvent from workspace and returns property wrapper over it. local property = client:Property(&quot;MyProperty&quot;) property:Observe(function(value) print(`New value {value}`) end)   "},{"title":"Get​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#Get","content":"&lt;/&gt; Client.Property:Get() → any Returns the current value.  "},{"title":"RequestToSync​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#RequestToSync","content":"&lt;/&gt; Client.Property:RequestToSync() → () Requests a server to synchronize value.  "},{"title":"Observe​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#Observe","content":"&lt;/&gt; Client.Property:Observe(observer: Types.ClientObserver) → () Assigns new observer.  "},{"title":"SetMiddleware​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#SetMiddleware","content":"&lt;/&gt; Client.Property:SetMiddleware(middleware: Types.ClientMiddleware) → () Post-method for setup a middleware. Only inbound middleware is used bc of nature of ClientProperty. client:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))   "},{"title":"IsReady​","type":1,"pageTitle":"Client.Property","url":"/Talkie/api/Client.Property#IsReady","content":"&lt;/&gt; Client.Property:IsReady() → boolean Is property initialized and ready to use. "},{"title":"Packet","type":0,"sectionRef":"#","url":"/Talkie/api/Packet","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Packet","url":"/Talkie/api/Packet#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Packet","url":"/Talkie/api/Packet#new","content":"&lt;/&gt; Packet.new( id: number, ...: {[string]: Types.TrivialType&lt;any&gt;} ) → Types.Packet Creates new packet by provided model and ID.  "},{"title":"Serialize​","type":1,"pageTitle":"Packet","url":"/Talkie/api/Packet#Serialize","content":"&lt;/&gt; Packet:Serialize(data: table) → Types.Buffer Serializes the packet to Talkie`s Buffer instance.  "},{"title":"Deserialize​","type":1,"pageTitle":"Packet","url":"/Talkie/api/Packet#Deserialize","content":"&lt;/&gt; Packet:Deserialize(data: Types.Buffer | buffer | string) → {[string]: any} Deserializes the buffer or string to readable data structure. "},{"title":"Server.Function","type":0,"sectionRef":"#","url":"/Talkie/api/Server.Function","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#new","content":"&lt;/&gt; Server.Function.new( parent: Instance , name: string, handler: Types.ServerCallback?, middleware: Types.ServerMiddleware? ) → Types.ServerFunction Creates new RemoteFunction and returns wrapper over it. local function typecheckForNumber(args) for k, v in args do if not (typeof(v) == &quot;number&quot;) then -- Cancel other middleware and RemoteFunction handler. return false end end end local function logger(args) for k, v in args do print(`{k} = {v}`) end end local function doubleArgs(args) for k, v in args do if typeof(v) == &quot;number&quot; then args[k] *= 2 end end end -- Only numbers allowed. local fun = server:Function(&quot;MyFunction&quot;, function(player, arg) print(`Player {player.Name} send us arg: {arg}`) return 42 end, Talkie.Inbound(typecheckForNumber, logger) + Talkie.Outbound(doubleArgs))   "},{"title":"Listen​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#Listen","content":"&lt;/&gt; Server.Function:Listen(handler: Types.ServerCallback) → () Assigns new handler that will called then client invokes the remote. fun:Listen(function(player, arg1, arg2) -- If middleware present, they also will be applied to this handler. print(`{player.Name} called us with arg1 {arg1} and {arg2}`) end)   "},{"title":"Invoke​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#Invoke","content":"&lt;/&gt; Server.Function:Invoke( player: Player , ...: any ) → ...any Invokes a function on the player with bunch of args. game.Players.PlayerAdded:Connect(function(player) fun:Invoke(player, ...) -- You can also use this variant. fun(player, ...) end)   "},{"title":"SetMiddleware​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#SetMiddleware","content":"&lt;/&gt; Server.Function:SetMiddleware(middleware: Types.ServerMiddleware) → () Post-method for setup a middleware. fun:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))   "},{"title":"Destroy​","type":1,"pageTitle":"Server.Function","url":"/Talkie/api/Server.Function#Destroy","content":"&lt;/&gt; Server.Function:Destroy() → () Destroys the RemoteFunction. "},{"title":"Talkie.Client","type":0,"sectionRef":"#","url":"/Talkie/api/Talkie.Client","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#properties","content":" "},{"title":"Inbound​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Inbound","content":"&lt;/&gt; Talkie.Client.Inbound: Middleware Creates middleware for inbound calls with given functions local inbound = Talkie.Inbound(someFunc1, someFunc2, func3, etc...)   "},{"title":"Outbound​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Outbound","content":"&lt;/&gt; Talkie.Client.Outbound: Middleware Creates middleware for outbound calls with given functions local outbound = Talkie.Outbound(someFunc1, someFunc2, func3, etc...)   "},{"title":"FunctionStorage​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#FunctionStorage","content":"&lt;/&gt; Talkie.Client.FunctionStorage: Storage&lt;Function&gt; A storage for all functions where Talkie caches them. local fun = Talkie.FunctionStorage.new(game.ReplicatedStorage, ...)   "},{"title":"EventStorage​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#EventStorage","content":"&lt;/&gt; Talkie.Client.EventStorage: Storage&lt;Event&gt; A storage for all events where Talkie caches them. local event = Talkie.EventStorage.new(game.ReplicatedStorage, ...)   "},{"title":"PropertyStorage​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#PropertyStorage","content":"&lt;/&gt; Talkie.Client.PropertyStorage: Storage&lt;Property&gt; A storage for all properties where Talkie caches them. local property = Talkie.PropertyStorage.new(game.ReplicatedStorage, ...)  "},{"title":"Functions​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#functions","content":" "},{"title":"Client​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Client","content":"&lt;/&gt; Talkie.Client.Client( parent: Instance? , namespace: string? ) → Types.Client Creates a new instance of the clientside Talkie to work with server modules: &quot;Function&quot;, &quot;Event&quot;, &quot;Property&quot;, etc... local client = Talkie.Client(game.ReplicatedStorage, &quot;MyNamespace&quot;) -- ReplicatedStorage is used by default, so u can use this trick: local client = Talkie.Client(nil, &quot;MyNamespace&quot;)   "},{"title":"new​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#new","content":"&lt;/&gt; Talkie.Client.new() → () Alias for Talkie.Client  "},{"title":"Function​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Function","content":"&lt;/&gt; Talkie.Client:Function( name: string, handler: Types.ClientHandler?, middleware: Types.ClientMiddleware? ) → Types.ClientFunction Grabs RemoteFunction from workspace and return Talkie`s wrapper over it. local fun = client:Function(&quot;MyFunction&quot;) fun(42) -- or fun:Invoke   "},{"title":"Event​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Event","content":"&lt;/&gt; Talkie.Client:Event( name: string, middleware: Types.ClientMiddleware? ) → Types.ClientEvent Grabs RemoteEvent or UnreliableRemoteEvent from workspace and return Talkie`s wrapper over it. local event = client:Event(&quot;MyEvent&quot;) event:Fire(24, 26)   "},{"title":"Property​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Property","content":"&lt;/&gt; Talkie.Client:Property( name: string, middleware: Types.ClientMiddleware? ) → Types.ClientProperty Grabs RemoteEvent from workspace and returns Talkie`s wrapper over it. local property = client:Property(&quot;MyProperty&quot;) property:Observe(function(value) print(`New value {value}`) end)   "},{"title":"Parse​","type":1,"pageTitle":"Talkie.Client","url":"/Talkie/api/Talkie.Client#Parse","content":"&lt;/&gt; Talkie.Client:Parse() → Types.ClientParseResult Parses the current folder and returns list with remotes in it. local remotes = client:Parse() print(remotes.MyFunction, remotes.MyEvent, remotes.MyProperty)  "},{"title":"Server.Event","type":0,"sectionRef":"#","url":"/Talkie/api/Server.Event","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#new","content":"&lt;/&gt; Server.Event.new( parent: Instance , name: string, unreliable: boolean?, middleware: Types.ServerMiddleware? ) → Types.ServerEvent Creates new RemoteEvent or UnreliableRemoteEvent instance and return wrapper over it. local function Typechecker(...) local types = {...} return function(args) for k, v in args do if not (typeof(v) == types[k]) then return false -- Don't proccess the event. end end end end -- Middleware template for inbound calls. local typecheckerMiddleware = Talkie.Inbound(Typechecker(&quot;number&quot;, &quot;string&quot;)) -- Creates reliable event (by default) local event = server:Event(&quot;MyReliableEvent&quot;, false, typecheckerMiddleware) -- Creates unreliable event local event0 = server:Event(&quot;MyUnreliableEvent&quot;, true, typecheckerMiddleware) -- Connecting. event:Connect(function(player, arg0, arg1) print(&quot;We got good arguments!&quot;) print(arg0, arg1) end) -- Fire example. game.Players.PlayerAdded:Connect(function(player) event:Fire(player, &quot;Hello, waiting for invokes&quot;) end)   "},{"title":"Connect​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#Connect","content":"&lt;/&gt; Server.Event:Connect(handler: Types.ServerHandler) → Signal.Connection Appends new connection to the event.  "},{"title":"Once​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#Once","content":"&lt;/&gt; Server.Event:Once(handler: Types.ServerHandler) → Signal.Connection Appends new connection that will fired only once.  "},{"title":"Wait​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#Wait","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Server.Event:Wait() → any Yields the current thread until the signal is fired, and returns the arguments fired from the signal.  "},{"title":"Fire​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#Fire","content":"&lt;/&gt; Server.Event:Fire( player: Player | {Player }, ...: any ) → () Fires the event on player or bunch of players with bunch of args. game.Players.PlayerAdded:Connect(function(player) -- Fire on single player. event:Fire(player, &quot;Hello&quot;) end) -- Fire on multiple players. event:Fire({player1, player2, player3, ...}, &quot;Hello&quot;)   "},{"title":"FireAll​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#FireAll","content":"&lt;/&gt; Server.Event:FireAll(...: any) → () Fires all clients on server with bunch of args.  "},{"title":"FireByFilter​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#FireByFilter","content":"&lt;/&gt; Server.Event:FireByFilter( filter: (player: Player ) → boolean, ...: any ) → () Fires only clients that passed filter function. local function filter(player: Player): boolean return player.Name == &quot;SayMyName&quot; end -- Will fire only for player with name `SayMyName`. event:FireByFilter(filter, ...)   "},{"title":"FireExcept​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#FireExcept","content":"&lt;/&gt; Server.Event:FireExcept( players: Player | {Player }, ...: any ) → () Fires all clients expect specific ones. Can pass one player or table of players. Uses FireByFilter underhood. -- Will fire for all players except player0 event:FireExcept(player0, ...) -- Will fire for all players except player0, 1, 2 and 3 event:FireExcept({player0, player1, player2, player3}, ...)   "},{"title":"SetMiddleware​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#SetMiddleware","content":"&lt;/&gt; Server.Event:SetMiddleware(middleware: Types.ServerMiddleware) → () Post-method for setup a middleware. event:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))   "},{"title":"Destroy​","type":1,"pageTitle":"Server.Event","url":"/Talkie/api/Server.Event#Destroy","content":"&lt;/&gt; Server.Event:Destroy() → () Destroys the event. "},{"title":"intro","type":0,"sectionRef":"#","url":"/Talkie/docs/intro","content":"intro Intro is TODO.","keywords":""},{"title":"Talkie.Server","type":0,"sectionRef":"#","url":"/Talkie/api/Talkie.Server","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#properties","content":" "},{"title":"Inbound​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Inbound","content":"&lt;/&gt; Talkie.Server.Inbound: Middleware Creates middleware for inbound calls with given functions local inbound = Talkie.Inbound(someFunc1, someFunc2, func3, etc...)   "},{"title":"Outbound​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Outbound","content":"&lt;/&gt; Talkie.Server.Outbound: Middleware Creates middleware for outbound calls with given functions local outbound = Talkie.Outbound(someFunc1, someFunc2, func3, etc...)   "},{"title":"FunctionStorage​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#FunctionStorage","content":"&lt;/&gt; Talkie.Server.FunctionStorage: Storage&lt;Function&gt; A storage for all functions where Talkie caches them. local fun = Talkie.FunctionStorage.new(game.ReplicatedStorage, ...)   "},{"title":"EventStorage​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#EventStorage","content":"&lt;/&gt; Talkie.Server.EventStorage: Storage&lt;Event&gt; A storage for all events where Talkie caches them. local event = Talkie.EventStorage.new(game.ReplicatedStorage, ...)   "},{"title":"PropertyStorage​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#PropertyStorage","content":"&lt;/&gt; Talkie.Server.PropertyStorage: Storage&lt;Property&gt; A storage for all properties where Talkie caches them. local property = Talkie.PropertyStorage.new(game.ReplicatedStorage, ...)  "},{"title":"Functions​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#functions","content":" "},{"title":"Server​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Server","content":"&lt;/&gt; Talkie.Server.Server( parent: Instance? , namespace: string? ) → Types.Server Creates a new instance of the serverside Talkie to work with server modules: &quot;Function&quot;, &quot;Event&quot;, &quot;Property&quot;, etc... local server = Talkie.Server(game.ReplicatedStorage, &quot;MyNamespace&quot;) -- ReplicatedStorage is used by default, so u can use this trick: local server = Talkie.Server(nil, &quot;MyNamespace&quot;)   "},{"title":"new​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#new","content":"&lt;/&gt; Talkie.Server.new() → () Just an alias for Talkie.Server  "},{"title":"Function​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Function","content":"&lt;/&gt; Talkie.Server:Function( name: string, handler: Types.ServerHandler?, middleware: Types.ServerMiddleware? ) → Types.ServerFunction Creates a RemoteFunction object, cache it and returns a wrapper over it. local function logger(args) for k, v in args do print(`{k} = {v}`) end end local function doubleArgs(args) for k, v in args do if typeof(v) == &quot;number&quot; then args[k] *= 2 end end end local fun = server:Function(&quot;MyFunction&quot;, function(player, arg) print(`Player {player.Name} send us arg: {arg}`) return 42 end, Talkie.Inbound(logger) + Talkie.Outbound(doubleArgs))   "},{"title":"Event​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Event","content":"&lt;/&gt; Talkie.Server:Event( name: string, unreliable: boolean?, middleware: Types.ServerMiddleware? ) → Types.ServerEvent Creates a RemoteEvent (by default) or UnreliableRemoteEvent object, cache it and returns a wrapper over it. local function Typechecker(...) local types = {...} return function(args) for k, v in args do if not (typeof(v) == types[k]) then return false -- Don't proccess the event. end end end end -- Middleware template for inbound calls. local typecheckerMiddleware = Talkie.Inbound(Typechecker(&quot;number&quot;, &quot;string&quot;)) -- Creates reliable event (by default) local event = server:Event(&quot;MyReliableEvent&quot;, false, typecheckerMiddleware) -- Creates unreliable event local event0 = server:Event(&quot;MyUnreliableEvent&quot;, true, typecheckerMiddleware) -- Connecting. event:Connect(function(player, arg0, arg1) print(&quot;We got good arguments!&quot;) print(arg0, arg1) end) -- Fire example. game.Players.PlayerAdded:Connect(function(player) event:Fire(player, &quot;Hello, waiting for invokes&quot;) end)   "},{"title":"Property​","type":1,"pageTitle":"Talkie.Server","url":"/Talkie/api/Talkie.Server#Property","content":"&lt;/&gt; Talkie.Server:Property( name: string, value: any, middleware: Types.ServerMiddleware? ) → Types.ServerProperty Creates a Property based on RemoteEvent, cache it and returns wrapper over it. -- All players will have 0 by default. local property = server:Property(&quot;MyScoreProperty&quot;, 0) game.Players.PlayerAdded:Connect(function(player) -- Getting score from our real and cool database. local score = MagicDatabase:GetProperty(&quot;game.score&quot;, player) -- Set only for this player his score. -- Everything will be automatically handled by Talkie on Server and Client. property:SetFor(player, score) end)  "},{"title":"Buffer","type":0,"sectionRef":"#","url":"/Talkie/api/Buffer","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#new","content":"&lt;/&gt; Buffer.new(data: Types.Buffer | buffer | string | number | nil) → Types.Buffer Constructs new buffer.  "},{"title":"Is​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#Is","content":"&lt;/&gt; Buffer.Is(buf: table) → () Check is value Buffer`s instance.  "},{"title":"Resize​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#Resize","content":"&lt;/&gt; Buffer:Resize(len: number) → () Autoresize method is used to prevent out-of-bounds error. Used for internal Buffer`s methods.  "},{"title":"Realloc​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#Realloc","content":"&lt;/&gt; Buffer:Realloc(len: number) → () Force reallocation method with specified size.  "},{"title":"ReadInt8​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadInt8","content":"&lt;/&gt; Buffer:ReadInt8() → number Returns a number in range [-128; 127]  "},{"title":"ReadUInt8​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadUInt8","content":"&lt;/&gt; Buffer:ReadUInt8() → number Returns a number in range [0; 255]  "},{"title":"ReadInt16​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadInt16","content":"&lt;/&gt; Buffer:ReadInt16() → number Returns a number in range [-32768; 32767]  "},{"title":"ReadUInt16​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadUInt16","content":"&lt;/&gt; Buffer:ReadUInt16() → number Returns a number in range [0; 65535].  "},{"title":"ReadInt32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadInt32","content":"&lt;/&gt; Buffer:ReadInt32() → number Returns a number in range [-2'147'483'648; 2'147'483'647]  "},{"title":"ReadUInt32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadUInt32","content":"&lt;/&gt; Buffer:ReadUInt32() → number Returns a number in range [0; 4'294'967'295]  "},{"title":"ReadFloat​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadFloat","content":"&lt;/&gt; Buffer:ReadFloat() → number Returns a floating point (32 bits) number.  "},{"title":"ReadFloat32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadFloat32","content":"&lt;/&gt; Buffer:ReadFloat32() → number Returns a floating point (32 bits) number.  "},{"title":"ReadFloat64​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadFloat64","content":"&lt;/&gt; Buffer:ReadFloat64() → number Returns a floating point (64 bits) number.  "},{"title":"WriteInt8​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteInt8","content":"&lt;/&gt; Buffer:WriteInt8( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [-128; 127]  "},{"title":"WriteUInt8​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteUInt8","content":"&lt;/&gt; Buffer:WriteUInt8( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [0; 255]  "},{"title":"WriteInt16​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteInt16","content":"&lt;/&gt; Buffer:WriteInt16( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [-32768; 32767]  "},{"title":"WriteUInt16​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteUInt16","content":"&lt;/&gt; Buffer:WriteUInt16( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [0; 65535]  "},{"title":"WriteInt32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteInt32","content":"&lt;/&gt; Buffer:WriteInt32( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [-2'147'483'648; 2'147'483'647]  "},{"title":"WriteUInt32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteUInt32","content":"&lt;/&gt; Buffer:WriteUInt32( value: number-- Integer. Floating point will throw the error. ) → () Writes a number in range [0; 4'294'967'295]  "},{"title":"WriteFloat​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteFloat","content":"&lt;/&gt; Buffer:WriteFloat(value: number) → () Writes a floating point (32 bits) value.  "},{"title":"WriteFloat32​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteFloat32","content":"&lt;/&gt; Buffer:WriteFloat32(value: number) → () Writes a floating point (32 bits) value.  "},{"title":"WriteFloat64​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteFloat64","content":"&lt;/&gt; Buffer:WriteFloat64(value: number) → () Writes a floating point (64 bits) value.  "},{"title":"ReadString​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadString","content":"&lt;/&gt; Buffer:ReadString(len: number) → string Reads the string from buffer.  "},{"title":"WriteString​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteString","content":"&lt;/&gt; Buffer:WriteString(str: string) → () Writes the string in buffer.  "},{"title":"WriteBuffer​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteBuffer","content":"&lt;/&gt; Buffer:WriteBuffer(input: Types.Buffer | buffer | string) → () Writes other buffer into self.  "},{"title":"ReadBuffer​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadBuffer","content":"&lt;/&gt; Buffer:ReadBuffer(size: number) → Types.Buffer Reads wrapper class from buffer  "},{"title":"WriteBoolean​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#WriteBoolean","content":"&lt;/&gt; Buffer:WriteBoolean(state: boolean) → () Writes a boolean.  "},{"title":"ReadBoolean​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ReadBoolean","content":"&lt;/&gt; Buffer:ReadBoolean() → boolean Reads a boolean.  "},{"title":"GetNumberOfUnreadBytes​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#GetNumberOfUnreadBytes","content":"&lt;/&gt; Buffer:GetNumberOfUnreadBytes() → number Returns number of unread bytes.  "},{"title":"GetNumberOfBytesUsed​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#GetNumberOfBytesUsed","content":"&lt;/&gt; Buffer:GetNumberOfBytesUsed() → number Returns number of bytes already written.  "},{"title":"IgnoreBytes​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#IgnoreBytes","content":"&lt;/&gt; Buffer:IgnoreBytes(count: number) → () Ignore specific amount of bytes. Useful then you want to ignore packetId or unnecessary data.  "},{"title":"GetSize​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#GetSize","content":"&lt;/&gt; Buffer:GetSize() → number Returns the length of buffer. buffer.len used underhood.  "},{"title":"SetWriteOffset​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#SetWriteOffset","content":"&lt;/&gt; Buffer:SetWriteOffset(offset: number) → () Shifts the write cursor.  "},{"title":"SetReadOffset​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#SetReadOffset","content":"&lt;/&gt; Buffer:SetReadOffset(offset: number) → () Shifts the read cursor.  "},{"title":"ResetWriteOffset​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ResetWriteOffset","content":"&lt;/&gt; Buffer:ResetWriteOffset() → () Resets write cursor by setting it to 0.  "},{"title":"ResetReadOffset​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ResetReadOffset","content":"&lt;/&gt; Buffer:ResetReadOffset() → () Resets read cursor by setting it to 0.  "},{"title":"ResetOffsets​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#ResetOffsets","content":"&lt;/&gt; Buffer:ResetOffsets() → () Resets all offsets.  "},{"title":"Reset​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#Reset","content":"&lt;/&gt; Buffer:Reset() → () Resets all offsets and fill buffer as 0x00 for all length.  "},{"title":"SetData​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#SetData","content":"&lt;/&gt; Buffer:SetData(data: Types.Buffer | buffer | string) → () Sets new data.  "},{"title":"GetData​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#GetData","content":"&lt;/&gt; Buffer:GetData() → buffer Returns buffer to network replicate.  "},{"title":"Serialize​","type":1,"pageTitle":"Buffer","url":"/Talkie/api/Buffer#Serialize","content":"&lt;/&gt; Buffer:Serialize() → string Serializes buffer. buffer.tostring used underhood. "},{"title":"Server.Property","type":0,"sectionRef":"#","url":"/Talkie/api/Server.Property","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#new","content":"&lt;/&gt; Server.Property.new( parent: Instance , name: string, initial: any, middleware: Types.ServerMiddleware? ) → Types.ServerProperty Creates new RemoteEvent on workspace and returns property wrapper over it. -- All players will have 0 by default. local property = server:Property(&quot;MyScoreProperty&quot;, 0) game.Players.PlayerAdded:Connect(function(player) -- Getting score from our real and cool database. local score = MagicDatabase:GetProperty(&quot;game.score&quot;, player) -- Set only for this player his score. -- Everything will be automatically handled by Talkie on Server and Client. property:SetFor(player, score) end)   "},{"title":"Set​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#Set","content":"&lt;/&gt; Server.Property:Set(value: any) → () Set new value for all players and clear all custom one. property:Set(2) -- Will set 2 for all players as base value and clear the custom one.   "},{"title":"SetFor​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#SetFor","content":"&lt;/&gt; Server.Property:SetFor( player: Player | {Player }, value: any ) → () Set new value only for specific player or players. property:SetFor(player22, 24) -- Will set 24 only for player22. -- Or for players. property:SetFor({player22, player34}, 24) -- Will set 24 only for player22 and player34.   "},{"title":"SetTop​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#SetTop","content":"&lt;/&gt; Server.Property:SetTop(value: any) → () Set new value for new players or players that don't have custom one. -- Will set 24 only for players that don't have custom data was set by `SetFor`. property:SetTop(24)   "},{"title":"SetByFilter​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#SetByFilter","content":"&lt;/&gt; Server.Property:SetByFilter( filter: Types.ServerSetFilter, value: any ) → () Sets the value only for players passed the filter. local function filter(player: Player, value: number): boolean return not (player.Name == &quot;SayMyName&quot;) end -- Set 24 as value for all players if their nickname is not `SayMyName` property:SetByFilter(filter, 24)   "},{"title":"GetFor​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#GetFor","content":"&lt;/&gt; Server.Property:GetFor(player: Player ) → any Returns the value for specific player.  "},{"title":"ClearFor​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#ClearFor","content":"&lt;/&gt; Server.Property:ClearFor(player: Player | {Player }) → () Clears custom data for specific player or players. property:ClearFor(player2) property:ClearFor({player2, player3, ...})   "},{"title":"ClearAll​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#ClearAll","content":"&lt;/&gt; Server.Property:ClearAll() → () Clear custom data for all players.  "},{"title":"ClearByFilter​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#ClearByFilter","content":"&lt;/&gt; Server.Property:ClearByFilter(filter: Types.ServerFilter) → () Clear custom data for players passed the filter. local function filter(player: Player): boolean return player.Name == &quot;SayMyName&quot; end -- Clear data for player with nickname `SayMyName` property:ClearByFilter(filter)   "},{"title":"SetMiddleware​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#SetMiddleware","content":"&lt;/&gt; Server.Property:SetMiddleware(middleware: Types.ServerMiddleware) → () Post-method for setup a middleware. Only outbound middleware is used bc of nature of ServerProperty. property:SetMiddleware(Talkie.Outbound(...))   "},{"title":"Destroy​","type":1,"pageTitle":"Server.Property","url":"/Talkie/api/Server.Property#Destroy","content":"&lt;/&gt; Server.Property:Destroy() → () Destroys the property. "}]