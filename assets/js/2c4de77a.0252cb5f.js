"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[440],{91777:e=>{e.exports=JSON.parse('{"functions":[{"name":"Server","desc":"Creates a new instance of the serverside Talkie to work with server modules: \\"Function\\", \\"Event\\", \\"Property\\", etc...\\n\\n```lua\\nlocal server = Talkie.Server(game.ReplicatedStorage, \\"MyNamespace\\")\\n-- ReplicatedStorage is used by default, so u can use this trick:\\nlocal server = Talkie.Server(nil, \\"MyNamespace\\")\\n```","params":[{"name":"parent","desc":"","lua_type":"Instance?"},{"name":"namespace","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"Types.Server\\n"}],"function_type":"static","source":{"line":76,"path":"src/Server/init.lua"}},{"name":"Function","desc":"Creates a RemoteFunction object, cache it and returns a wrapper over it.\\n\\n```lua\\nlocal function logger(args)\\n  for k, v in args do\\n    print(`{k} = {v}`)\\n  end\\nend\\n\\nlocal function doubleArgs(args)\\n  for k, v in args do\\n    if typeof(v) == \\"number\\" then\\n      args[k] *= 2\\n    end\\n  end\\nend\\n\\nlocal fun = server:Function(\\"MyFunction\\", function(player, arg)\\n  print(`Player {player.Name} send us arg: {arg}`)\\n  return 42\\nend, Talkie.Inbound(logger) + Talkie.Outbound(doubleArgs))\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"handler","desc":"","lua_type":"Types.ServerHandler?"},{"name":"middleware","desc":"","lua_type":"Types.ServerMiddleware?\\n"}],"returns":[{"desc":"","lua_type":"Types.ServerFunction\\n"}],"function_type":"method","source":{"line":133,"path":"src/Server/init.lua"}},{"name":"Event","desc":"Creates a RemoteEvent (by default) or UnreliableRemoteEvent object, cache it and returns a wrapper over it.\\n\\n```lua\\nlocal function Typechecker(...)\\n  local types = {...}\\n  return function(args)\\n    for k, v in args do\\n      if not (typeof(v) == types[k]) then\\n        return false -- Don\'t proccess the event.\\n      end\\n    end\\n  end\\nend\\n\\n-- Middleware template for inbound calls.\\nlocal typecheckerMiddleware = Talkie.Inbound(Typechecker(\\"number\\", \\"string\\"))\\n\\n-- Creates reliable event (by default)\\nlocal event = server:Event(\\"MyReliableEvent\\", false, typecheckerMiddleware)\\n\\n-- Creates unreliable event\\nlocal event0 = server:Event(\\"MyUnreliableEvent\\", true, typecheckerMiddleware)\\n\\n-- Connecting.\\nevent:Connect(function(player, arg0, arg1)\\n  print(\\"We got good arguments!\\")\\n  print(arg0, arg1)\\nend)\\n\\n-- Fire example.\\ngame.Players.PlayerAdded:Connect(function(player)\\n  event:Fire(player, \\"Hello, waiting for invokes\\")\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"unreliable","desc":"","lua_type":"boolean?"},{"name":"middleware","desc":"","lua_type":"Types.ServerMiddleware?"}],"returns":[{"desc":"","lua_type":"Types.ServerEvent\\n"}],"function_type":"method","source":{"line":179,"path":"src/Server/init.lua"}},{"name":"Property","desc":"Creates a Property based on RemoteEvent, cache it and returns wrapper over it.\\n\\n```lua\\n-- All players will have 0 by default.\\nlocal property = server:Property(\\"MyScoreProperty\\", 0)\\n\\ngame.Players.PlayerAdded:Connect(function(player)\\n  -- Getting score from our real and cool database.\\n  local score = MagicDatabase:GetProperty(\\"game.score\\", player)\\n\\n  -- Set only for this player his score.\\n  -- Everything will be automatically handled by Talkie on Server and Client.\\n  property:SetFor(player, score)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"value","desc":"","lua_type":"any"},{"name":"middleware","desc":"","lua_type":"Types.ServerMiddleware?"}],"returns":[{"desc":"","lua_type":"Types.ServerProperty\\n"}],"function_type":"method","source":{"line":202,"path":"src/Server/init.lua"}},{"name":"new","desc":"Just an alias for Talkie.Server","params":[],"returns":[],"function_type":"static","source":{"line":209,"path":"src/Server/init.lua"}}],"properties":[{"name":"Inbound","desc":"Creates middleware for inbound calls with given functions\\n```lua\\nlocal inbound = Talkie.Inbound(someFunc1, someFunc2, func3, etc...)\\n```","lua_type":"Middleware","source":{"line":27,"path":"src/Server/init.lua"}},{"name":"Outbound","desc":"Creates middleware for outbound calls with given functions\\n```lua\\nlocal outbound = Talkie.Outbound(someFunc1, someFunc2, func3, etc...)\\n```","lua_type":"Middleware","source":{"line":34,"path":"src/Server/init.lua"}},{"name":"FunctionStorage","desc":"A storage for all functions where Talkie caches them.\\n```lua\\nlocal fun = Talkie.FunctionStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Function>","source":{"line":47,"path":"src/Server/init.lua"}},{"name":"EventStorage","desc":"A storage for all events where Talkie caches them.\\n```lua\\nlocal event = Talkie.EventStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Event>","source":{"line":55,"path":"src/Server/init.lua"}},{"name":"PropertyStorage","desc":"A storage for all properties where Talkie caches them.\\n```lua\\nlocal property = Talkie.PropertyStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Property>","source":{"line":63,"path":"src/Server/init.lua"}}],"types":[],"name":"Talkie.Server","desc":"A class to simplify working with RemoteEvents and RemoteFunctions on the server side.\\n```lua\\nlocal Talkie = require(game.ReplicatedStorage.Talkie)\\n```","realm":["Server"],"source":{"line":7,"path":"src/Server/init.lua"}}')}}]);