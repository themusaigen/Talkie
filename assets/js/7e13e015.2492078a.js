"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[154],{86568:e=>{e.exports=JSON.parse('{"functions":[{"name":"Client","desc":"Creates a new instance of the clientside Talkie to work with server modules: \\"Function\\", \\"Event\\", \\"Property\\", etc...\\n\\n```lua\\nlocal client = Talkie.Client(game.ReplicatedStorage, \\"MyNamespace\\")\\n-- ReplicatedStorage is used by default, so u can use this trick:\\nlocal client = Talkie.Client(nil, \\"MyNamespace\\")\\n```","params":[{"name":"parent","desc":"","lua_type":"Instance?"},{"name":"namespace","desc":"","lua_type":"string?"}],"returns":[{"desc":"","lua_type":"Types.Client\\n"}],"function_type":"static","source":{"line":75,"path":"src/Client/init.lua"}},{"name":"Function","desc":"Grabs [RemoteFunction](https://developer.roblox.com/en-us/api-reference/class/RemoteFunction) from workspace and return Talkie`s wrapper over it.\\n\\n```lua\\nlocal fun = client:Function(\\"MyFunction\\")\\n\\nfun(42) -- or fun:Invoke\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"handler","desc":"","lua_type":"Types.ClientHandler?"},{"name":"middleware","desc":"","lua_type":"Types.ClientMiddleware?\\n"}],"returns":[{"desc":"","lua_type":"Types.ClientFunction\\n"}],"function_type":"method","source":{"line":112,"path":"src/Client/init.lua"}},{"name":"Event","desc":"Grabs [RemoteEvent](https://developer.roblox.com/en-us/api-reference/class/RemoteEvent) or [UnreliableRemoteEvent](https://developer.roblox.com/en-us/api-reference/class/UnreliableRemoteEvent) from workspace and return Talkie`s wrapper over it.\\n\\n```lua\\nlocal event = client:Event(\\"MyEvent\\")\\n\\nevent:Fire(24, 26)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"middleware","desc":"","lua_type":"Types.ClientMiddleware?"}],"returns":[{"desc":"","lua_type":"Types.ClientEvent\\n"}],"function_type":"method","source":{"line":131,"path":"src/Client/init.lua"}},{"name":"Property","desc":"Grabs [RemoteEvent](https://developer.roblox.com/en-us/api-reference/class/RemoteEvent) from workspace and returns Talkie`s wrapper over it.\\n\\n```lua\\nlocal property = client:Property(\\"MyProperty\\")\\n\\nproperty:Observe(function(value)\\n  print(`New value {value}`)\\nend)\\n```","params":[{"name":"name","desc":"","lua_type":"string"},{"name":"middleware","desc":"","lua_type":"Types.ClientMiddleware?"}],"returns":[{"desc":"","lua_type":"Types.ClientProperty\\n"}],"function_type":"method","source":{"line":148,"path":"src/Client/init.lua"}},{"name":"Parse","desc":"Parses the current folder and returns list with remotes in it.\\n\\n```lua\\nlocal remotes = client:Parse()\\n\\nprint(remotes.MyFunction, remotes.MyEvent, remotes.MyProperty)\\n```","params":[],"returns":[{"desc":"","lua_type":"Types.ClientParseResult\\n"}],"function_type":"method","source":{"line":163,"path":"src/Client/init.lua"}},{"name":"new","desc":"Alias for `Talkie.Client`","params":[],"returns":[],"function_type":"static","source":{"line":184,"path":"src/Client/init.lua"}}],"properties":[{"name":"Inbound","desc":"Creates middleware for inbound calls with given functions\\n```lua\\nlocal inbound = Talkie.Inbound(someFunc1, someFunc2, func3, etc...)\\n```","lua_type":"Middleware","source":{"line":26,"path":"src/Client/init.lua"}},{"name":"Outbound","desc":"Creates middleware for outbound calls with given functions\\n```lua\\nlocal outbound = Talkie.Outbound(someFunc1, someFunc2, func3, etc...)\\n```","lua_type":"Middleware","source":{"line":33,"path":"src/Client/init.lua"}},{"name":"FunctionStorage","desc":"A storage for all functions where Talkie caches them.\\n```lua\\nlocal fun = Talkie.FunctionStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Function>","source":{"line":46,"path":"src/Client/init.lua"}},{"name":"EventStorage","desc":"A storage for all events where Talkie caches them.\\n```lua\\nlocal event = Talkie.EventStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Event>","source":{"line":54,"path":"src/Client/init.lua"}},{"name":"PropertyStorage","desc":"A storage for all properties where Talkie caches them.\\n```lua\\nlocal property = Talkie.PropertyStorage.new(game.ReplicatedStorage, ...)\\n```","lua_type":"Storage<Property>","source":{"line":62,"path":"src/Client/init.lua"}}],"types":[],"name":"Talkie.Client","desc":"A class to simplify working with RemoteEvents and RemoteFunctions on the client side.","realm":["Client"],"source":{"line":4,"path":"src/Client/init.lua"}}')}}]);