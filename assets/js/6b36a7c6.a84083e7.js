"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[219],{42549:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates new [RemoteEvent](https://developer.roblox.com/en-us/api-reference/class/RemoteEvent) or [UnreliableRemoteEvent](https://developer.roblox.com/en-us/api-reference/class/UnreliableRemoteEvent) instance and return wrapper over it.\\n\\n```lua\\nlocal function Typechecker(...)\\n  local types = {...}\\n  return function(args)\\n    for k, v in args do\\n      if not (typeof(v) == types[k]) then\\n        return false -- Don\'t proccess the event.\\n      end\\n    end\\n  end\\nend\\n\\n-- Middleware template for inbound calls.\\nlocal typecheckerMiddleware = Talkie.Inbound(Typechecker(\\"number\\", \\"string\\"))\\n\\n-- Creates reliable event (by default)\\nlocal event = server:Event(\\"MyReliableEvent\\", false, typecheckerMiddleware)\\n\\n-- Creates unreliable event\\nlocal event0 = server:Event(\\"MyUnreliableEvent\\", true, typecheckerMiddleware)\\n\\n-- Connecting.\\nevent:Connect(function(player, arg0, arg1)\\n  print(\\"We got good arguments!\\")\\n  print(arg0, arg1)\\nend)\\n\\n-- Fire example.\\ngame.Players.PlayerAdded:Connect(function(player)\\n  event:Fire(player, \\"Hello, waiting for invokes\\")\\nend)\\n```","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"name","desc":"","lua_type":"string"},{"name":"unreliable","desc":"","lua_type":"boolean?"},{"name":"middleware","desc":"","lua_type":"Types.ServerMiddleware?\\n"}],"returns":[{"desc":"","lua_type":"Types.ServerEvent\\n"}],"function_type":"static","source":{"line":54,"path":"src/Server/Event.lua"}},{"name":"Connect","desc":"Appends new connection to the event.","params":[{"name":"handler","desc":"","lua_type":"Types.ServerHandler"}],"returns":[{"desc":"","lua_type":"Signal.Connection\\n"}],"function_type":"method","source":{"line":113,"path":"src/Server/Event.lua"}},{"name":"Once","desc":"Appends new connection that will fired only once.","params":[{"name":"handler","desc":"","lua_type":"Types.ServerHandler"}],"returns":[{"desc":"","lua_type":"Signal.Connection\\n"}],"function_type":"method","source":{"line":122,"path":"src/Server/Event.lua"}},{"name":"Wait","desc":"Yields the current thread until the signal is fired, and returns the arguments fired from the signal.","params":[],"returns":[{"desc":"","lua_type":"any\\n"}],"function_type":"method","yields":true,"source":{"line":132,"path":"src/Server/Event.lua"}},{"name":"Fire","desc":"Fires the event on player or bunch of players with bunch of args.\\n\\n```lua\\ngame.Players.PlayerAdded:Connect(function(player)\\n  -- Fire on single player.\\n  event:Fire(player, \\"Hello\\")\\nend)\\n\\n-- Fire on multiple players.\\nevent:Fire({player1, player2, player3, ...}, \\"Hello\\")\\n```","params":[{"name":"player","desc":"","lua_type":"Player | { Player }"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":151,"path":"src/Server/Event.lua"}},{"name":"FireAll","desc":"Fires all clients on server with bunch of args.","params":[{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":177,"path":"src/Server/Event.lua"}},{"name":"FireByFilter","desc":"Fires only clients that passed filter function.\\n\\n```lua\\nlocal function filter(player: Player): boolean\\n  return player.Name == \\"SayMyName\\"\\nend\\n\\n-- Will fire only for player with name `SayMyName`.\\nevent:FireByFilter(filter, ...)\\n```","params":[{"name":"filter","desc":"","lua_type":"(player: Player) -> boolean"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":204,"path":"src/Server/Event.lua"}},{"name":"FireExcept","desc":"Fires all clients expect specific ones.\\nCan pass one player or table of players.\\nUses `FireByFilter` underhood.\\n\\n```lua\\n-- Will fire for all players except player0\\nevent:FireExcept(player0, ...)\\n\\n-- Will fire for all players except player0, 1, 2 and 3\\nevent:FireExcept({player0, player1, player2, player3}, ...)\\n```","params":[{"name":"players","desc":"","lua_type":"Player | { Player }"},{"name":"...","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":230,"path":"src/Server/Event.lua"}},{"name":"SetMiddleware","desc":"Post-method for setup a middleware.\\n\\n```lua\\nevent:SetMiddleware(Talkie.Inbound(...) + Talkie.Outbound(...))\\n```","params":[{"name":"middleware","desc":"","lua_type":"Types.ServerMiddleware"}],"returns":[],"function_type":"method","source":{"line":263,"path":"src/Server/Event.lua"}},{"name":"Destroy","desc":"Destroys the event.","params":[],"returns":[],"function_type":"method","source":{"line":289,"path":"src/Server/Event.lua"}}],"properties":[],"types":[],"name":"Server.Event","desc":"Serverside wrapper over [RemoteEvent](https://developer.roblox.com/en-us/api-reference/class/RemoteEvent)","realm":["Server"],"source":{"line":4,"path":"src/Server/Event.lua"}}')}}]);